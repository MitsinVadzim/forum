openapi: 3.0.0
info:
  title: Forum
  version: "0.1"
  description: Forum - API
tags:
  - name: Post
  - name: Auth
paths:
  # ========================================
  # ===== Post API
  # ========================================
  /posts:
    get:
      tags:
        - Post
      operationId: getPosts
      security:
        - userAuth: []
      parameters:
        - $ref: "#/components/parameters/PageQueryParameter"
        - $ref: "#/components/parameters/SizeQueryParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostModel"
        "401":
          $ref: "#/components/responses/Unauthorized"

  # ========================================
  # ===== Auth API
  # ========================================
  /auth/login:
    post:
      tags:
        - Auth
      operationId: login
      security: []
      requestBody:
        $ref: "#/components/requestBodies/LoginRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          $ref: "#/components/responses/Conflict"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
  /auth/refresh-token:
    post:
      tags:
        - Auth
      operationId: refreshToken
      security: []
      requestBody:
        $ref: "#/components/requestBodies/RefreshTokenRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /auth/signup:
    post:
      tags:
        - Auth
      operationId: signup
      security: []
      requestBody:
        $ref: "#/components/requestBodies/SignupRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

servers:
  - url: /api/v1

components:
  parameters:
    PageQueryParameter:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
    SizeQueryParameter:
      name: size
      in: query
      schema:
        type: integer
        minimum: 10
        maximum: 30
        default: 10
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    UnsupportedMediaType:
      description: Unsupported Media Type
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    NotAcceptable:
      description: Not Acceptable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
  securitySchemes:
    userAuth:
      type: apiKey
      in: header
      name: Authorization
  requestBodies:
    LoginRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LoginRequest"
      required: true
    RefreshTokenRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RefreshTokenRequest"
      required: true
    SignupRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignupRequest"
      required: true
  schemas:
    ProfileModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        role:
          $ref: "#/components/schemas/UserRole"
        iconUrl:
          type: string
        createdAt:
          type: string
    UserRole:
      type: string
      enum:
        - USER
        - ADMIN
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
    SignupRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
    PostModel:
      type: object
      required:
        - title
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
        content:
          type: string
        imageUrl:
          type: string
    TokenModel:
      type: object
      properties:
        accessToken:
          type: string
        accessIssuedAt:
          type: integer
          format: int64
        accessExpiresIn:
          type: integer
          format: int64
        refreshToken:
          type: string
        refreshIssuedAt:
          type: integer
          format: int64
        refreshExpiresIn:
          type: integer
          format: int64
    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
          format: int32
          minimum: 100
          maximum: 600
        detail:
          type: string
        instance:
          type: string
          format: uri
        violations:
          type: array
          items:
            $ref: "#/components/schemas/Violation"
    Violation:
      type: object
      properties:
        field:
          type: string
        message:
          type: string