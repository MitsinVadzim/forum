openapi: 3.0.0
info:
  title: Forum
  version: "0.1"
  description: Forum - API
tags:
  - name: Post
  - name: Auth
paths:
  /auth/login:
    get:
      tags:
        - Auth
      operationId: login
      security: []
      requestBody:
        $ref: "#/components/requestBodies/LoginRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /posts:
    get:
      tags:
        - Post
      operationId: getPosts
      security:
        - userAuth: []
      parameters:
        - $ref: "#/components/parameters/PageQueryParameter"
        - $ref: "#/components/parameters/SizeQueryParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostModel"
        "401":
          $ref: "#/components/responses/Unauthorized"
servers:
  - url: /api/v1
components:
  parameters:
    PageQueryParameter:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
    SizeQueryParameter:
      name: size
      in: query
      schema:
        type: integer
        minimum: 10
        maximum: 30
        default: 10
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
  requestBodies:
    LoginRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LoginRequest"
      required: true
  securitySchemes:
    userAuth:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    TokenModel:
      type: object
      properties:
        accessToken:
          type: string
        accessIssuedAt:
          type: integer
          format: int64
        accessExpiresIn:
          type: integer
          format: int64
        refreshToken:
          type: string
        refreshIssuedAt:
          type: integer
          format: int64
        refreshExpiresIn:
          type: integer
          format: int64
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    PostModel:
      type: object
      required:
        - title
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
        content:
          type: string
        imageUrl:
          type: array
          items:
            type: string
    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
          format: int32
          minimum: 100
          maximum: 600
        detail:
          type: string
        instance:
          type: string
          format: uri
        violations:
          type: array
          items:
            $ref: "#/components/schemas/Violation"
    Violation:
      type: object
      properties:
        field:
          type: string
        message:
          type: string