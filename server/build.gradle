buildscript{
    ext{
        testcontainersVersion = "1.10.5"
        basePackage = "com.vadim"
        hibernateSpatialVersion = "5.3.7.Final"
        springfoxSwaggerVersion = "2.9.2"
        swaggerAnnotationsVersion = "1.5.21"
        jjwtVersion = "0.10.5"
        openApiVersion = '3.3.4'
        mapstructVersion = "1.3.0.Final"
        javaFakerVersion = "0.15"
        googleCloudStorageVersion = "1.82.0"
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:${openApiVersion}"
    }
}


plugins {
    id 'org.springframework.boot' version '2.1.6.RELEASE'
    id 'java'
    id 'net.ltgt.apt' version '0.8'
}

repositories {
    mavenCentral()
}

apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.openapi.generator'
apply plugin: 'jacoco'

apply from: "gradle/swagger.gradle"
apply from: "gradle/mapstruct.gradle"
apply from: "gradle/checkstyle.gradle"
apply from: "gradle/jacoco.gradle"
apply from: "gradle/pmd.gradle"



group = 'com.vadim'
version = '0.1'
sourceCompatibility = '11'
assert System.properties["java.specification.version"] == "11"

configurations {
    testAnnotationProcessor.extendsFrom annotationProcessor
    testCompileOnly.extendsFrom compileOnly
}


dependencies {
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-jdbc"
    implementation "org.springframework.security:spring-security-oauth2-client"
    implementation "org.yaml:snakeyaml"
    implementation "org.flywaydb:flyway-core"
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"


    implementation "io.swagger:swagger-annotations:${swaggerAnnotationsVersion}"
    implementation "org.springframework.boot:spring-boot-devtools"
    implementation "org.mapstruct:mapstruct-jdk8:${mapstructVersion}"

    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
    runtimeOnly "org.postgresql:postgresql"

    compile "com.google.cloud:google-cloud-storage:${googleCloudStorageVersion}"
    compile "org.springframework.boot:spring-boot-configuration-processor"
    compile "io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}"
    compileOnly "org.projectlombok:lombok"
    compileOnly "org.mapstruct:mapstruct:${mapstructVersion}"

    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testImplementation "com.github.javafaker:javafaker:${javaFakerVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
}
